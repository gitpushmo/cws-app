import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { CreateQuoteRequest, QuoteResponse, ApiError } from '@/lib/types'

export async function POST(request: NextRequest) {
  try {
    const supabase = await createClient()

    // Check authentication
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Niet geautoriseerd' },
        { status: 401 }
      )
    }

    // Get user profile to check role
    const { data: profile } = await supabase
      .from('profiles')
      .select('role')
      .eq('id', user.id)
      .single()

    if (!profile || profile.role !== 'customer') {
      return NextResponse.json(
        { error: 'Alleen klanten kunnen offertes aanmaken' },
        { status: 403 }
      )
    }

    const body: CreateQuoteRequest = await request.json()

    // Basic validation
    if (!body.shipping_address?.street || !body.shipping_address?.city) {
      return NextResponse.json(
        { error: 'Verzendadres is verplicht' },
        { status: 400 }
      )
    }

    // Create quote - quote_number will be auto-generated by trigger
    const { data: quote, error } = await supabase
      .from('quotes')
      .insert({
        customer_id: user.id,
        notes: body.notes,
        deadline: body.deadline,
        shipping_address: body.shipping_address,
        status: 'pending'
      })
      .select()
      .single()

    if (error) {
      console.error('Error creating quote:', error)
      return NextResponse.json(
        { error: 'Fout bij aanmaken offerte', details: error.message },
        { status: 500 }
      )
    }

    return NextResponse.json(quote, { status: 201 })

  } catch (error) {
    console.error('Unexpected error in POST /api/quotes:', error)
    return NextResponse.json(
      { error: 'Interne serverfout' },
      { status: 500 }
    )
  }
}

export async function GET(request: NextRequest) {
  try {
    const supabase = await createClient()

    // Check authentication
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Niet geautoriseerd' },
        { status: 401 }
      )
    }

    // Get quotes - RLS will filter based on user role automatically
    const { data: quotes, error } = await supabase
      .from('quotes')
      .select(`
        id,
        quote_number,
        status,
        notes,
        deadline,
        shipping_address,
        created_at,
        updated_at,
        customer_id,
        operator_id
      `)
      .order('created_at', { ascending: false })

    if (error) {
      console.error('Error fetching quotes:', error)
      return NextResponse.json(
        { error: 'Fout bij ophalen offertes', details: error.message },
        { status: 500 }
      )
    }

    return NextResponse.json(quotes || [])

  } catch (error) {
    console.error('Unexpected error in GET /api/quotes:', error)
    return NextResponse.json(
      { error: 'Interne serverfout' },
      { status: 500 }
    )
  }
}
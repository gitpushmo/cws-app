import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { CreateQuoteRequest, QuoteResponse, ApiError } from '@/lib/types'

export async function POST(request: NextRequest) {
  try {
    const supabase = await createClient()

    // Check authentication
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Niet geautoriseerd' },
        { status: 401 }
      )
    }

    // Get user profile to check role
    const { data: profile } = await supabase
      .from('profiles')
      .select('role')
      .eq('id', user.id)
      .single()

    if (!profile || profile.role !== 'customer') {
      return NextResponse.json(
        { error: 'Alleen klanten kunnen offertes aanmaken' },
        { status: 403 }
      )
    }

    // Handle both JSON (legacy) and FormData (new integrated flow)
    const contentType = request.headers.get('content-type') || ''
    let quoteData: CreateQuoteRequest
    const files: File[] = []

    if (contentType.includes('multipart/form-data')) {
      // New integrated flow with files
      const formData = await request.formData()

      // Extract quote data
      const quoteDataStr = formData.get('quoteData') as string
      if (!quoteDataStr) {
        return NextResponse.json(
          { error: 'Quote data is verplicht' },
          { status: 400 }
        )
      }
      quoteData = JSON.parse(quoteDataStr)

      // Extract files
      for (const [key, value] of formData.entries()) {
        if (key.startsWith('file_') && value instanceof File) {
          files.push(value)
        }
      }

      // Require at least one DXF file for integrated flow
      const dxfFiles = files.filter(f => f.name.toLowerCase().endsWith('.dxf'))
      if (dxfFiles.length === 0) {
        return NextResponse.json(
          { error: 'Minimaal één DXF bestand is verplicht' },
          { status: 400 }
        )
      }
    } else {
      // Legacy JSON-only flow (for backward compatibility)
      quoteData = await request.json()
    }

    // Basic validation
    if (!quoteData.shipping_address?.street || !quoteData.shipping_address?.city) {
      return NextResponse.json(
        { error: 'Verzendadres is verplicht' },
        { status: 400 }
      )
    }

    // Create quote - quote_number will be auto-generated by trigger
    const { data: quote, error: quoteError } = await supabase
      .from('quotes')
      .insert({
        customer_id: user.id,
        notes: quoteData.notes,
        deadline: quoteData.deadline,
        shipping_address: quoteData.shipping_address,
        status: 'pending'
      })
      .select()
      .single()

    if (quoteError) {
      console.error('Error creating quote:', quoteError)
      return NextResponse.json(
        { error: 'Fout bij aanmaken offerte', details: quoteError.message },
        { status: 500 }
      )
    }

    // If no files, return quote (legacy mode)
    if (files.length === 0) {
      return NextResponse.json(quote, { status: 201 })
    }

    // Process file uploads and create line items
    const uploadedFiles = []
    const MAX_FILE_SIZE = 10 * 1024 * 1024 // 10MB

    for (const file of files) {
      // File validation
      if (file.size > MAX_FILE_SIZE) {
        // Cleanup: delete quote if file upload fails
        await supabase.from('quotes').delete().eq('id', quote.id)
        return NextResponse.json(
          { error: `Bestand ${file.name} is te groot (max 10MB)` },
          { status: 400 }
        )
      }

      const fileExtension = file.name.split('.').pop()?.toLowerCase()
      if (!fileExtension || !['dxf', 'pdf'].includes(fileExtension)) {
        // Cleanup: delete quote if file upload fails
        await supabase.from('quotes').delete().eq('id', quote.id)
        return NextResponse.json(
          { error: `Bestand ${file.name} heeft ongeldig type (alleen DXF en PDF toegestaan)` },
          { status: 400 }
        )
      }

      // Upload to storage
      const bucket = fileExtension === 'dxf' ? 'dxf-files' : 'pdf-files'
      const timestamp = Date.now()
      const fileName = `${file.name.replace(/\.[^/.]+$/, '')}_${timestamp}.${fileExtension}`
      const filePath = `${quote.id}/${fileName}`

      const { error: uploadError } = await supabase.storage
        .from(bucket)
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: false
        })

      if (uploadError) {
        console.error('Upload error:', uploadError)
        // Cleanup: delete quote and any uploaded files
        await supabase.from('quotes').delete().eq('id', quote.id)
        return NextResponse.json(
          { error: `Fout bij uploaden ${file.name}`, details: uploadError.message },
          { status: 500 }
        )
      }

      // Get public URL
      const { data: urlData } = supabase.storage
        .from(bucket)
        .getPublicUrl(filePath)

      uploadedFiles.push({
        name: file.name,
        url: urlData.publicUrl,
        type: fileExtension,
        path: filePath
      })

      // Create line item for DXF files (core business rule: each DXF = one LineItem)
      if (fileExtension === 'dxf') {
        const { error: lineItemError } = await supabase
          .from('line_items')
          .insert({
            quote_id: quote.id,
            dxf_file_url: urlData.publicUrl,
            dxf_file_name: file.name,
            quantity: 1
          })

        if (lineItemError) {
          console.error('Error creating line item:', lineItemError)
          // Cleanup: delete quote and uploaded files
          await supabase.from('quotes').delete().eq('id', quote.id)
          return NextResponse.json(
            { error: `Fout bij aanmaken line item voor ${file.name}` },
            { status: 500 }
          )
        }
      }

      // For PDF files, find corresponding DXF line item and attach PDF
      if (fileExtension === 'pdf') {
        // Try to match PDF to DXF by similar filename
        const pdfBaseName = file.name.replace(/\.[^/.]+$/, '').toLowerCase()

        // Find line item with similar DXF filename
        const { data: lineItems } = await supabase
          .from('line_items')
          .select('id, dxf_file_name')
          .eq('quote_id', quote.id)
          .is('pdf_file_url', null)

        let matchedLineItem = null
        if (lineItems) {
          matchedLineItem = lineItems.find(item => {
            const dxfBaseName = item.dxf_file_name.replace(/\.[^/.]+$/, '').toLowerCase()
            return dxfBaseName === pdfBaseName
          })
        }

        if (matchedLineItem) {
          // Update existing line item with PDF
          await supabase
            .from('line_items')
            .update({
              pdf_file_url: urlData.publicUrl,
              pdf_file_name: file.name
            })
            .eq('id', matchedLineItem.id)
        }
        // If no matching DXF found, PDF is stored but not linked to line item
        // This is acceptable - customer might upload supporting PDFs
      }
    }

    // Return quote with uploaded files info
    return NextResponse.json({
      ...quote,
      uploaded_files: uploadedFiles
    }, { status: 201 })

  } catch (error) {
    console.error('Unexpected error in POST /api/quotes:', error)
    return NextResponse.json(
      { error: 'Interne serverfout' },
      { status: 500 }
    )
  }
}

export async function GET(request: NextRequest) {
  try {
    const supabase = await createClient()

    // Check authentication
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Niet geautoriseerd' },
        { status: 401 }
      )
    }

    // Get quotes - RLS will filter based on user role automatically
    const { data: quotes, error } = await supabase
      .from('quotes')
      .select(`
        id,
        quote_number,
        status,
        notes,
        deadline,
        shipping_address,
        created_at,
        updated_at,
        customer_id,
        operator_id
      `)
      .order('created_at', { ascending: false })

    if (error) {
      console.error('Error fetching quotes:', error)
      return NextResponse.json(
        { error: 'Fout bij ophalen offertes', details: error.message },
        { status: 500 }
      )
    }

    return NextResponse.json(quotes || [])

  } catch (error) {
    console.error('Unexpected error in GET /api/quotes:', error)
    return NextResponse.json(
      { error: 'Interne serverfout' },
      { status: 500 }
    )
  }
}